class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
       queue<string> q;             //does bfs
        q.push(beginWord);
        int wordSize = beginWord.size();
        
        unordered_set<string> word;
        for(int i=0;i<wordList.size();i++){
            word.insert(wordList[i]);       
            
        }
        if(word.find(endWord)==word.end())      //if endWord is not available in the dictionary at all
            return 0;
        
        int len=0;
        while(!q.empty()){
            len++;
            int qlen=q.size();
            
            for(int i=0;i<qlen;i++){        //iterate over words in queue
                string s=q.front();
                q.pop();
                for(int j=0;j<wordSize;j++){    //iterate over each letter of the word
                        char org=s[j];
                    for(char ch='a';ch<='z';ch++){
                        s[j]=ch;
                        if(s==endWord)      //when you find the last word
                            return len+1;
                        if(word.find(s)==word.end())       //in case that word doesn't exist at all in the dictionary
                            continue;
                        word.erase(s);  //when the word is in the dictionary, remove and put into queue
                        q.push(s);
                    
                    }
                    s[j]=org;
                }
            }
        }
        return 0;
    }
};

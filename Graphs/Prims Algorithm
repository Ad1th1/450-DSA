Have three arrays
-> key = stores all the adjeacent edges to be considered
-> mst 
-> parent = stores parent of each node


> Make an MST using the smallest edge first
> MST always has n-1 edges
> Needs sorting
> no cycle in an MST
> key array(initialized to infinity, contains edge weight), parent array, mst array(boolean)
> iterate over key, figure out which is minimum, then check out the adjacent nodes of that minimum, 
> whenever one key value is less, update key and parent

> TC = O(nlog(n))
> SC = O(n)

#include<bits/stdc++.h>
using namespace std;

int main(){
    int V,E;
    cin>>V>>E;
    vector<pair<int,int>>adj[V];        //node, weight

    int a,b,wt;
    for(int i=0;i<E;i++){
        cin >> a >> b >> wt;
        adj[a].push_back(make_pair(b,wt));       //node, weight
        adj[b].push_back(make_pair(a,wt));
    }

    int parent[V],key[V];
    bool mst[V];

    for(int i=0;i<V;i++){
        parent[i] = -1;
        mst[i] = false;
        key[i] = INT_MAX;
    }
    

    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;    //pair(distance,vertex)
    // weight, node
    key[0] = 0;
    parent[0] = -1;
    pq.push({0,0});

    while(!pq.empty()){
        
        int u = pq.top().second;
        pq.pop();

        mst[u] = true;

        for(auto it:adj[u]){
            int v = it.first;
            int weight = it.second;
            if(mst[v]!=true && weight<key[v]){
                key[v] = weight;
                parent[v] = u;
                pq.push({key[v],v});
            }
        }
    }

    for (int i = 1; i < V; i++) 
        cout << parent[i] << " - " << i <<" \n"; 
	return 0;
}

// 6 7 
// 0 1 5 
// 0 2 10 
// 0 3 100 
// 1 3 50 
// 1 4 200
// 3 4 250
// 4 5 50 

-> np-hard problem
-> find all possible paths in a graph
-> ensure that you are not taking duplicate cycles
-> cycle to reach same point using different paths, traversing each node only once
-> no hamiltonian cycle for graphs with articulation point(node that needs to be traversed twice)

#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
   public:
    map<int,int> mp1;
    void helper(vector<int> adj[],int i , int cnt ,int n ,bool &res,vector<int> &vis){
        vis[i] = 1;
        if(cnt == n){
            res  = true;
        }
        for(int j : adj[i]){
            if(vis[j] == 1 or mp1.find(j) != mp1.end()) continue;
            helper(adj,j,cnt  + 1,n,res,vis);
        }
        vis[i] = 0;
    }
    bool check(int N,int M,vector<vector<int>> Edges)
    {
        // code here
        vector<int> adj[N + 1];
        for(int i = 0 ; i < M ; i ++){
            auto it = Edges[i];
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        vector<int> vis(N + 1, 0);
        bool res = false;
        mp1.clear();
        for(int i = 1 ; i <= N ; i ++){
        helper(adj,i,1,N,res,vis);
        // mp1[i] = 1;
        }
        return res;
    
}
};
 

// { Driver Code Starts.
int main()
{
	int t;
	cin>>t;
	while(t--){
    	int N,M,X,Y;
    	cin>>N>>M;
    	vector<vector<int>> Edges;
    	for(int i=0;i<M;i++)
    	{
    		cin>>X>>Y;
    		Edges.push_back({X,Y});
    	}
    	Solution obj;
    	if(obj.check(N,M,Edges)){
    		cout<<"1"<<endl;
    	}
    	else
    	cout<<"0"<<endl;
	}
}  // } Driver Code Ends

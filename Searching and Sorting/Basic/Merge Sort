Time Complexity = O(nlogn)
Space Complexity = O(n)

Sort first half(A, l, m)
Sort second half(A, m+1, r)
Merge (A, l, m, r)

class Solution
{
    public:
    void merge(int arr[], int l, int m, int r)
    {
       int i=l,j=m+1,k=l,b[r+1];
       while(i<=m && j<=r){
           if(arr[i]<arr[j]){
               b[k]=arr[i];
               i++;
               k++;
           }
           else{
               b[k]=arr[j];
               k++;
               j++;
           }
       }
       if(i>m){
           while(j<=r){
               b[k]=arr[j];
               k++;
               j++;
           }
       }
       else{
           while(i<=m){
               b[k]=arr[i];
               k++;
               i++;
           }
       }
       for(int i=l;i<=r;i++)
       arr[i]=b[i];
       
    }
    public:
    void mergeSort(int arr[], int l, int r)
    {
        if(l<r){
        int mid = l+(r-l)/2;
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,r);
        merge(arr,l,mid,r);
    }
    }
};

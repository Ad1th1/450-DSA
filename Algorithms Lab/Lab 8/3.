Floyd Warshall = shortest distance between every pair of vertices using dp

A(k)[i,j] = A(k-1)[i,j], A(k-1)[i,k] + A(k-1)[k,j]

#include<bits/stdc++.h>
using namespace std;

#define V 4

void printSol(int dist[][V]){
  for(int i=0;i<V;i++){
    for(int j=0;j<V;j++){
      if(dist[i][j]==INT_MAX)
      cout<<"INF"<<"\t";
      else
      cout<<dist[i][j]<<"\t";
    }
    cout<<endl;
  }
}

void floydWarshall(int graph[][V]){
  int dist[V][V],i,j,k;

  for(i=0;i<V;i++)
    for(j=0;j<V;j++)
      dist[i][j] = graph[i][j];
    
  for(k=0;k<V;k++){
    for(i=0;i<V;i++){
      for(j=0;j<V;j++){
        if(dist[i][j]>dist[i][k]+dist[k][j] && dist[k][j]!=INT_MAX && dist[i][k]!=INT_MAX)
        dist[i][j] = dist[i][k] + dist[k][j];
      }
    }
  }
  printSol(dist);
}

int main(){
  int graph[V][V] = {{0,5,INT_MAX,10},
                     {INT_MAX,0,3,INT_MAX},
                      {INT_MAX,INT_MAX,0,1},              
                      {INT_MAX,INT_MAX,INT_MAX,0}};

  floydWarshall(graph);
  return 0;
}

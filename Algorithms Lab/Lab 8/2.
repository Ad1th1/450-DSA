Matrix Chain Multiplication

m[i,j] = min(m[i,k] + m[k+1,j] + d(i-1)*dk*dj)

#include<bits/stdc++.h>
using namespace std;

int dp[100][100];

int ans(int *p, int i,int j){
    if(i==j)
    return 0;

    if(dp[i][j]!=-1)
    return dp[i][j];

    dp[i][j] = INT_MAX;
    for(int k=i;k<j;k++){
        dp[i][j] = min(dp[i][j],ans(p,i,k)+ans(p,k+1,j)+p[i-1]*p[k]*p[j]);
    }
    return dp[i][j];
}

int solve(int *p,int n){
    int i=1,j=n-1;
    return ans(p,i,j);
    }

int main(){
    int arr[]={1,2,3,4};
    int n = sizeof(arr)/sizeof(arr[0]);
    memset(dp,-1,sizeof dp);

    cout<<"Minimum number of multiplications "<<solve(arr,n);
}

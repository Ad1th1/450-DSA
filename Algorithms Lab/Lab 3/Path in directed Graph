#include<bits/stdc++.h>
using namespace std;
vector<int>::iterator x;
void addEdge(vector<int> adj[],int u, int v){
    adj[u].push_back(v);
}

bool isReachable(vector<int> adj[],int s, int d, int V){
    if(s==d)
    return true;

    bool *visited = new bool[V];
    for(int i=0;i<V;i++){
        visited[i] = false;
    }

    queue<int> q;
    visited[s] = true;
    q.push(s);

    while(!q.empty()){
        int a = q.front();
        q.pop();

        for(x = adj[s].begin(); x != adj[s].end(); ++x){
            if(*x==d)
                return true;
             if(!visited[*x]){
                 visited[*x] = true;
                 q.push(*x);
             }
        }
    }
    return false;
}


int main(){
    int V=4;
    vector<int> adj[V];
    addEdge(adj,0, 1);
    addEdge(adj,0, 2);
    addEdge(adj,1, 3);
    addEdge(adj,2, 0);
    addEdge(adj,2, 3);
    addEdge(adj,3, 3);

    int u = 1, v = 3;
    if(isReachable(adj,u, v, V))
        cout<< "\n There is a path from " << u << " to " << v;
    else
        cout<< "\n There is no path from " << u << " to " << v;

    u = 3, v = 1;
    if(isReachable(adj,u, v, V))
        cout<< "\n There is a path from " << u << " to " << v;
    else
        cout<< "\n There is no path from " << u << " to " << v;

    return 0;
}

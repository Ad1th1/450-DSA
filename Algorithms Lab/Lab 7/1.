Strassen's Matrix Multiplication:

Regular Multiplication:
C11 = (A11*B11) + (A12*B21)
C12 = (A11*B12) + (A12*B22)
C21 = (A21*B11) + (A22*B21)
C22 = (A21*B12) + (A22*B22)

Strassen's Matrix Multiplication:
P1 = (A11 + A12)*(B11 + B12)
P2 = (A21 + A22)*B11
P3 = A11*(B12 - B22)
P4 = A22*(B21 - B11)
P5 = (A11 + A12)*B22
P6 = (A21 - A11)*(B11 + B12)
P7 = (A12 - A22)*(B21 + B22)

C11 = P1 + P4 - P5 + P7
C12 = P3 + P5
C21 = P2 + P4
C22 = P1 + P3 - P2 + P6

T(n) = { 1  n<=2
       { 7T(n/2) + n^2  n>2
       log7/log2 = 2.81


#include<algorithm>
#include<bits/stdc++.h>

using namespace std;

int nextpowerof2(int k){
    return pow(2,int(ceil(log2(k))));
}

void display(vector<vector<int>>&matrix,int m,int n){
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            cout<<matrix[i][j]<<"\t";
        }
        cout<<endl;
    }
}

void add(vector<vector<int>>&A,vector<vector<int>>&B,vector<vector<int>>&C,int size){
    int i,j;
    for(i=0;i<size;i++){
        for(j=0;j<size;j++){
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}

void sub(vector<vector<int>>&A,vector<vector<int>>&B,vector<vector<int>>&C,int size){
    int i,j;
    for(i=0;i<size;i++){
        for(j=0;j<size;j++){
            C[i][j] = A[i][j] - B[i][j];
        }
    }
}

void Strassen_algorithmA(vector<vector<int>>&A,vector<vector<int>>&B, vector<vector<int>>&C,int size){
    //base case
    if(size == 1){
        C[0][0] = A[0][0]*B[0][0];
        return;
    }
    else{
        int new_size = size/2;
        vector<int> z(new_size);
        vector<vector<int>> a11(new_size,z),a12(new_size,z),a21(new_size,z),a22(new_size,z), b11(new_size,z),b12(new_size,z),b21(new_size,z),b22(new_size,z),c11(new_size,z),c12(new_size,z),c21(new_size,z),c22(new_size,z),p1(new_size,z),p2(new_size,z),p3(new_size,z),p4(new_size,z),p5(new_size,z),p6(new_size,z),p7(new_size,z),aResult(new_size,z),bResult(new_size,z);

        int i,j;

        for(i=0;i<new_size;i++){
            for(j=0;j<new_size;j++){
                a11[i][j] = A[i][j];
                a12[i][j] = A[i][j + new_size];
                a21[i][j] = A[i + new_size][j];
                a22[i][j] = A[i + new_size][j + new_size];

                b11[i][j] = B[i][j];
                b12[i][j] = B[i][j + new_size];
                b21[i][j] = B[i + new_size][j];
                b22[i][j] = B[i + new_size][j + new_size];
            }
        }

        //calculate p1 to p7
        
        //p1 = (a11 + a12) * (b11 + b12)
        add(a11,a22,aResult,new_size);
        add(b11,b22,bResult,new_size);
        Strassen_algorithmA(aResult,bResult,p1,new_size);

        //p2 = (a21 + a22) *b11
        add(a21,a22,aResult,new_size);
        Strassen_algorithmA(aResult,b11,p2,new_size);

        //p3 = a11 * (b12 - b22)
        sub(b12,b22,bResult,new_size);
        Strassen_algorithmA(a11,bResult,p3,new_size);

        //p4 = a22 * (b21 - b11)
        sub(b21,b11,bResult,new_size);
        Strassen_algorithmA(a22,bResult,p4,new_size);

        //p5 = (a11 + a12) * b22
        add(a11,a12,aResult,new_size);
        Strassen_algorithmA(aResult,b22,p5,new_size);

        //p6 = (a12 - a22) * (b21 + b22)
        sub(a12,a22,aResult,new_size);
        add(b21,b22,bResult,new_size);
        Strassen_algorithmA(aResult,bResult,p6,new_size);

        //p7 = (a12 - a22) * (b21 + b22)
        sub(a12,a22,aResult,new_size);
        add(b21,b22,bResult,new_size);
        Strassen_algorithmA(aResult,bResult,p7,new_size);    

        // calculate c11 to c22

        //c11 = p1 + p4 - p5 + p7
        add(p1,p3,aResult,new_size);
        add(aResult,p7,bResult,new_size);
        sub(bResult,p5,c11,new_size);

        //c12 = p3 + p5
        add(p3,p5,c12,new_size);

        //c21 = p2 + p4
        add(p2,p4,c21,new_size);

        //c22 = p1 + p3 - p2 + p6
        add(p1,p3,aResult,new_size);
        add(aResult,p6,bResult,new_size);
        sub(bResult,p2,c22,new_size);

        // grouping obtained results 
        for(i=0;i<new_size;i++){
            for(j=0;j<new_size;j++){
                C[i][j] = c11[i][j];
                C[i][j + new_size] = c12[i][j];
                C[i + new_size][j] = c21[i][j];
                C[i + new_size][j + new_size] = c22[i][j];

                
            }
        }
    }
}

void Strassen_algorithm(vector<vector<int>>&A,vector<vector<int>>&B,int m,int n,int a,int b){

    //check to see if matrices are square and have dimension that is a power if 2, else pad with zeros

    int k = max({m,n,a,b});
    int s = nextpowerof2(k);

    vector<int> z(s);
    vector<vector<int>> Aa(s,z),Bb(s,z),Cc(s,z);

    for(unsigned int i=0;i<m;i++){
        for(unsigned int j=0;j<n;j++){
            Aa[i][j] = A[i][j];
        }
    }

    for(unsigned int i=0;i<a;i++){
        for(unsigned int j=0;j<b;j++){
            Bb[i][j] = B[i][j];
        }
    }

    Strassen_algorithmA(Aa,Bb,Cc,s);
    vector<int> temp1(b);
    vector<vector<int>>C(m,temp1);
    for(unsigned int i=0;i<m;i++){
        for(unsigned int j=0;j<b;j++){
            C[i][j] = Cc[i][j];
        }
    }
    display(C,m,b);
}

int main(){

    vector<vector<int>> a = {{1,0,0},{0,1,0},{0,0,1}};
    vector<vector<int>> b = {{-1,0,0},{0,-1,0},{0,0,-1}};

    Strassen_algorithm(a,b,3,3,3,3);

    return 0;
}
